/malloc.h:193:9: warning: incompatible redeclaration of library function 'free' [-Wincompatible-library-redeclaration]
void    free(void *addr, struct malloc_type *type);
        ^
./malloc.h:193:9: note: 'free' is a builtin with type 'void (void *)'
./malloc.h:195:10: warning: incompatible redeclaration of library function 'malloc' [-Wincompatible-library-redeclaration]
void    *malloc(size_t size, struct malloc_type *type, int flags) __malloc_like
         ^
./malloc.h:195:10: note: 'malloc' is a builtin with type 'void *(unsigned long)'
./malloc.h:271:10: warning: incompatible redeclaration of library function 'realloc' [-Wincompatible-library-redeclaration]
void    *realloc(void *addr, size_t size, struct malloc_type *type, int flags)
         ^
./malloc.h:271:10: note: 'realloc' is a builtin with type 'void *(void *, unsigned long)'
./malloc.h:292:17: warning: implicit declaration of function 'PTR2CAP' is invalid in C99 [-Wimplicit-function-declaration]
        return (PTR2CAP(malloc(size, type, flags)));
                ^
./malloc.h:292:25: warning: implicit declaration of function 'CHERI_REPRESENTABLE_LENGTH' is invalid in C99 [-Wimplicit-function-declaration]
        return (PTR2CAP(malloc(size, type, flags)));
                        ^
./malloc.h:235:24: note: expanded from macro 'malloc'
        size_t _size = CHERI_REPRESENTABLE_LENGTH(size);                \
                       ^
./malloc.h:292:25: warning: call to function 'CHERI_REPRESENTABLE_LENGTH' with no prototype may lead to run-time stack corruption [-Wcheri-prototypes]
        return (PTR2CAP(malloc(size, type, flags)));
                        ^~~~~~~~~~~~~~~~~~~~~~~~~
./malloc.h:235:24: note: expanded from macro 'malloc'
        size_t _size = CHERI_REPRESENTABLE_LENGTH(size);                \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
./malloc.h:292:25: note: candidate function declaration needs parameter types
./malloc.h:235:24: note: expanded from macro 'malloc'
        size_t _size = CHERI_REPRESENTABLE_LENGTH(size);                \
                       ^
./malloc.h:292:25: note: Calling functions without prototypes is dangerous because on some architectures (e.g. pure-capability MIPS) integer and pointer arguments are passed in different registers. If the call includes a parameter that does not match the function definition, the function will read uninitialized values from the argument registers.
./malloc.h:235:24: note: expanded from macro 'malloc'
        size_t _size = CHERI_REPRESENTABLE_LENGTH(size);                \
                       ^
./malloc.h:292:25: warning: implicitly declaring library function 'memset' with type 'void *(void *, int, unsigned long)' [-Wimplicit-function-declaration]
        return (PTR2CAP(malloc(size, type, flags)));
                        ^
./malloc.h:241:25: note: expanded from macro 'malloc'
                        memset(_malloc_item, 0, _size);                 \
                        ^
./malloc.h:292:25: note: include the header <string.h> or explicitly provide a declaration for 'memset'
./malloc.h:241:25: note: expanded from macro 'malloc'
                        memset(_malloc_item, 0, _size);                 \
                        ^
./malloc.h:292:17: warning: call to function 'PTR2CAP' with no prototype may lead to run-time stack corruption [-Wcheri-prototypes]
        return (PTR2CAP(malloc(size, type, flags)));
                ^~~~~~~
./malloc.h:292:17: note: candidate function declaration needs parameter types
./malloc.h:292:17: note: Calling functions without prototypes is dangerous because on some architectures (e.g. pure-capability MIPS) integer and pointer arguments are passed in different registers. If the call includes a parameter that does not match the function definition, the function will read uninitialized values from the argument registers.
./malloc.h:292:16: warning: incompatible integer to pointer conversion returning 'int' from a function with result type 'void *' [-Wint-conversion]
        return (PTR2CAP(malloc(size, type, flags)));
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./malloc.h:302:15: error: unknown type name 'bool'
static inline bool
              ^
./malloc.h:347:2: error: #endif without #if
#endif /* !_SYS_MALLOC_H_ */
 ^
contigmalloc.c:70:1: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]
MALLOC_DEFINE(M_DEVBUF, "devbuf", "device driver memory");
^
./malloc.h:157:9: note: expanded from macro 'MALLOC_DEFINE'
        SYSINIT(type##_init, SI_SUB_KMEM, SI_ORDER_THIRD, malloc_init,  \
        ^
contigmalloc.c:70:1: error: a parameter list without types is only allowed in a function definition
./malloc.h:157:17: note: expanded from macro 'MALLOC_DEFINE'
        SYSINIT(type##_init, SI_SUB_KMEM, SI_ORDER_THIRD, malloc_init,  \
                ^
<scratch space>:28:1: note: expanded from here
M_DEVBUF_init
^
contigmalloc.c:70:1: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]
./malloc.h:159:9: note: expanded from macro 'MALLOC_DEFINE'
        SYSUNINIT(type##_uninit, SI_SUB_KMEM, SI_ORDER_ANY,             \
        ^
contigmalloc.c:70:1: error: a parameter list without types is only allowed in a function definition
./malloc.h:159:19: note: expanded from macro 'MALLOC_DEFINE'
        SYSUNINIT(type##_uninit, SI_SUB_KMEM, SI_ORDER_ANY,             \
                  ^
<scratch space>:29:1: note: expanded from here
M_DEVBUF_uninit
^
contigmalloc.c:78:11: warning: variable 'addr' set but not used [-Wunused-but-set-variable]
    void *addr;
          ^
12 warnings and 4 errors generated.